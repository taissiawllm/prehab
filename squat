import mediapipe as mp
import cv2
import math

# Initialize the MediaPipe Pose model
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=True)

# Function to calculate the angle between three points
def calculate_angle(a, b, c):
    # Get coordinates
    a_x, a_y = a.x, a.y
    b_x, b_y = b.x, b.y
    c_x, c_y = c.x, c.y
    
    # Vectors
    ab = [a_x - b_x, a_y - b_y]
    bc = [c_x - b_x, c_y - b_y]

    # Calculate the dot product and magnitude of vectors
    dot_product = ab[0] * bc[0] + ab[1] * bc[1]
    magnitude_ab = math.sqrt(ab[0] ** 2 + ab[1] ** 2)
    magnitude_bc = math.sqrt(bc[0] ** 2 + bc[1] ** 2)
    
    # Calculate angle in radians
    angle_rad = math.acos(dot_product / (magnitude_ab * magnitude_bc))
    
    # Convert to degrees
    angle_deg = math.degrees(angle_rad)
    return angle_deg

# Read an image from file (replace with a path to an actual image on your system)
image = cv2.imread("/Users/taissiawillemsen/Pictures/squat.jpg")

# Check if image is loaded
if image is None:
    print("Error: Image not loaded. Please check the file path.")
else:
    # Convert the image to RGB (MediaPipe expects RGB images)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Process the image to detect pose
    results = pose.process(image_rgb)

    # Check if landmarks are detected
    if results.pose_landmarks:
        print("Pose landmarks detected.")
        
        # Draw landmarks and skeleton on the image
        mp.solutions.drawing_utils.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

        # Loop through landmarks and draw circles
        for landmark in results.pose_landmarks.landmark:
            x = int(landmark.x * image.shape[1])
            y = int(landmark.y * image.shape[0])
            cv2.circle(image, (x, y), 5, (0, 255, 0), -1)
        
        # Show the image with landmarks and skeleton
        cv2.imshow("Squat Pose", image)

        # Evaluate squat based on key points (hips, knees, and ankles)
        try:
            # Get landmarks for left knee, left hip, and left ankle
            left_knee = results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE]
            left_hip = results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_HIP]
            left_ankle = results.pose_landmarks.landmark[mp_pose.PoseLandmark.LEFT_ANKLE]
            
            # Calculate angle between hip, knee, and ankle (this will tell us if the knee is bent enough for a good squat)
            angle = calculate_angle(left_hip, left_knee, left_ankle)
            print(f"Left Knee Angle: {angle}")

            # Basic evaluation of squat depth
            if angle > 160:
                print("Squat too shallow (not deep enough).")
            elif angle < 90:
                print("Squat too deep (dangerous).")
            else:
                print("Good squat angle!")
        
        except Exception as e:
            print(f"Error evaluating squat: {e}")
        
        # Wait for user input to close the window
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    else:
        print("No pose landmarks detected.")
